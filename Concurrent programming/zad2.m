% ===================================
% Параллельные вычисления
% ===================================
% Создаем кластер
jm = parcluster();
% Создаем задание, где указанная функция задачи выполняется одновременно
% для всех работников, а функции lab могут использоваться для связи между
% работниками
pjob = createCommunicatingJob(jm, 'Type', 'SPMD');
% Подаем переменную x
x = 10;
% Минимальные и максимальные ограничения для числа рабочих, выполняющих 
% работу
pjob.NumWorkersRange = 3;
% Создаем задание в составе работы pjob
% pjob - работа
% @par_sum - выполняемая функция
% 1 - число аргументов
% {x} - строковый массив ячеек входных аргументов
createTask(pjob, @par_sum, 1, {x});
disp('ПАРАЛЛЕЛЬНЫЕ ВЫЧИСЛЕНИЯ:');
% Отправляем задачу pjob планировщику
submit(pjob);
% Задача выполнится, когда завершится команда wait()
wait(pjob);
% Как только задача завершается, получаем данные в локальной сессии
res = fetchOutputs(pjob);
% Выводим ответ
disp('Ответ = ');
disp(res(1, :));
% Завершаем параллельную работу
destroy(pjob);
% ===================================
% Последовательные вычисления
% ===================================
disp('ПОСЛЕДОВАТЕЛЬНЫЕ ВЫЧИСЛЕНИЯ:');
% Инициализируем переменную
out = 0;
for n=1:20
    % числитель
    top = x.^(n);
    % знаменатель
    bot = factorial(n);
    % сумма
    out = out + (top / bot);
end
% Выводим ответ
disp('Ответ = ');
disp(out);